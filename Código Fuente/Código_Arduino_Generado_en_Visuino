 //----------------------------------------------
 //
 //        Sketch Generated by Visuino
 //              www.visuino.com
 //          Version 7.8.3.60
 //
 //------------------ Source --------------------
 //
 // Sensor de ultrasonido medidor de distancia.visuino
 //
 //----------------------------------------------

#define VISUINO_ARDUINO_UNO

#include <OpenWire.h>
#include <Mitov.h>
#include <Mitov_StandardSerial.h>
#include <Mitov_UltrasonicRanger.h>
#include <Mitov_Math.h>
#include <Mitov_LogicGates.h>
#include <Mitov_LiquidCrystalDisplay.h>
#include <Mitov_Snapshot.h>
#include <Mitov_BinaryGenerators.h>

// Shared Component Member Variables

namespace ComponentVariables
{
class
{
public:
  bool Value1 : 1;
  uint32_t Value2 : 3;
  bool Value3 : 1;
  bool Value4 : 1;
  bool Value5 : 1;
  bool Value6 : 1;
  bool Value7 : 1;
  bool Value8 : 1;
  bool Value9 : 1;
  bool Value10 : 1;
  bool Value11 : 1;
  bool Value12 : 1;
  bool Value13 : 1;
  bool Value14 : 1;
  uint32_t Value15 : 5;
  uint32_t Value16 : 2;
  bool Value17 : 1;
  bool Value18 : 1;
  bool Value19 : 1;

} BitFields;

class Variable1
{
public:
  inline static bool GetValue() { return BitFields.Value1; }
  inline static void SetValue( bool AValue ) { BitFields.Value1 = AValue; }

};
class Variable2
{
public:
  inline static uint32_t GetValue() { return BitFields.Value2; }
  inline static void SetValue( uint32_t AValue ) { BitFields.Value2 = AValue; }

};
class Variable3
{
public:
  inline static bool GetValue() { return BitFields.Value3; }
  inline static void SetValue( bool AValue ) { BitFields.Value3 = AValue; }

};
class Variable4
{
public:
  inline static bool GetValue() { return BitFields.Value4; }
  inline static void SetValue( bool AValue ) { BitFields.Value4 = AValue; }

};
class Variable5
{
public:
  inline static bool GetValue() { return BitFields.Value5; }
  inline static void SetValue( bool AValue ) { BitFields.Value5 = AValue; }

};
class Variable6
{
public:
  inline static bool GetValue() { return BitFields.Value6; }
  inline static void SetValue( bool AValue ) { BitFields.Value6 = AValue; }

};
class Variable7
{
public:
  inline static bool GetValue() { return BitFields.Value7; }
  inline static void SetValue( bool AValue ) { BitFields.Value7 = AValue; }

};
class Variable8
{
public:
  inline static bool GetValue() { return BitFields.Value8; }
  inline static void SetValue( bool AValue ) { BitFields.Value8 = AValue; }

};
class Variable9
{
public:
  inline static bool GetValue() { return BitFields.Value9; }
  inline static void SetValue( bool AValue ) { BitFields.Value9 = AValue; }

};
class Variable10
{
public:
  inline static bool GetValue() { return BitFields.Value10; }
  inline static void SetValue( bool AValue ) { BitFields.Value10 = AValue; }

};
class Variable11
{
public:
  inline static bool GetValue() { return BitFields.Value11; }
  inline static void SetValue( bool AValue ) { BitFields.Value11 = AValue; }

};
class Variable12
{
public:
  inline static bool GetValue() { return BitFields.Value12; }
  inline static void SetValue( bool AValue ) { BitFields.Value12 = AValue; }

};
class Variable13
{
public:
  inline static bool GetValue() { return BitFields.Value13; }
  inline static void SetValue( bool AValue ) { BitFields.Value13 = AValue; }

};
class Variable14
{
public:
  inline static bool GetValue() { return BitFields.Value14; }
  inline static void SetValue( bool AValue ) { BitFields.Value14 = AValue; }

};
class Variable15
{
public:
  inline static uint32_t GetValue() { return BitFields.Value15; }
  inline static void SetValue( uint32_t AValue ) { BitFields.Value15 = AValue; }

};
class Variable16
{
public:
  inline static uint32_t GetValue() { return BitFields.Value16; }
  inline static void SetValue( uint32_t AValue ) { BitFields.Value16 = AValue; }

};
class Variable17
{
public:
  inline static bool GetValue() { return BitFields.Value17; }
  inline static void SetValue( bool AValue ) { BitFields.Value17 = AValue; }

};
class Variable18
{
public:
  inline static bool GetValue() { return BitFields.Value18; }
  inline static void SetValue( bool AValue ) { BitFields.Value18 = AValue; }

};
class Variable19
{
public:
  inline static bool GetValue() { return BitFields.Value19; }
  inline static void SetValue( bool AValue ) { BitFields.Value19 = AValue; }

};
} // ComponentVariables

// Arduino Constant Declarations

namespace VisuinoConstants
{
class FloatValue0
{
public:
    inline static constexpr float GetValue() { return 10000; }
};

class FloatValue1
{
public:
    inline static constexpr float GetValue() { return 30; }
};

class FloatValue2
{
public:
    inline static constexpr float GetValue() { return 15; }
};

class FloatValue3
{
public:
    inline static constexpr float GetValue() { return 0; }
};

class FloatValue4
{
public:
    inline static constexpr float GetValue() { return 10; }
};

class TextValue1
{
public:
    inline static constexpr const char *GetValue() { return ""; }
};

class TextValue0
{
public:
    inline static constexpr const char *GetValue() { return "Distancia (cm):"; }
};

} // VisuinoConstants

// Pin Call Declarations

namespace PinCalls
{
class PinCallerReceive0
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive1
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive2
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive3
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive4
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive5
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive6
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive7
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive8
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive9
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive10
{
public:
  void Notify( void *_Data );

};
} // PinCalls

// Call Chains

namespace CallChains
{
class InterruptRaising1
{
public:
  static void ChainCall();

};
class InterruptFalling1
{
public:
  static void ChainCall();

};
} // CallChains

// Arduino Board Declarations

namespace BoardDeclarations
{
Mitov::SerialPort<
  SERIAL_TYPE, // 0_T_TYPE
  Serial, // 1_C_TYPE
  Mitov::ConstantProperty<9, uint32_t, 0 >, // AfterSendingDelay
  Mitov::ConstantProperty<2, uint32_t, 8 >, // DataBits
  Mitov::ConstantProperty<8, bool, true >, // Enabled
  Mitov::ConstantProperty<51, uint32_t, 0>, // FEndTime
  Mitov::ConstantProperty<50, bool, false>, // FSending
  Mitov::GenericPin_NoImplementation<5 >, // OutputPin
  Mitov::ConstantProperty<1, Mitov::TArduinoStandardSerialParity, Mitov::spNone >, // Parity
  Mitov::DigitalPin_NoImplementation<7 >, // SendingOutputPin
  Mitov::ConstantProperty<4, uint32_t, 9600 >, // Speed
  Mitov::ConstantProperty<3, uint32_t, 1 > // StopBits
   > SerialPort0;

Mitov::ArduinoSerialInput<Mitov::SerialPort<
  SERIAL_TYPE, // 0_T_TYPE
  Serial, // 1_C_TYPE
  Mitov::ConstantProperty<9, uint32_t, 0 >, // AfterSendingDelay
  Mitov::ConstantProperty<2, uint32_t, 8 >, // DataBits
  Mitov::ConstantProperty<8, bool, true >, // Enabled
  Mitov::ConstantProperty<51, uint32_t, 0>, // FEndTime
  Mitov::ConstantProperty<50, bool, false>, // FSending
  Mitov::GenericPin_NoImplementation<5 >, // OutputPin
  Mitov::ConstantProperty<1, Mitov::TArduinoStandardSerialParity, Mitov::spNone >, // Parity
  Mitov::DigitalPin_NoImplementation<7 >, // SendingOutputPin
  Mitov::ConstantProperty<4, uint32_t, 9600 >, // Speed
  Mitov::ConstantProperty<3, uint32_t, 1 > // StopBits
   >, SerialPort0, float> SerialPort0_InputFloat_1;

Mitov::ArduinoDigitalOutputChannel<
  Mitov::ConstantProperty<22, bool, false>, // IsAnalog
  Mitov::ConstantProperty<24, bool, false>, // IsCombinedInOut
  Mitov::ConstantProperty<21, bool, false>, // IsOpenDrain
  Mitov::ConstantProperty<26, bool, false>, // IsOutput
  Mitov::ConstantProperty<20, bool, false>, // IsPullDown
  Mitov::ConstantProperty<2, bool, false >, // IsPullUp
  Mitov::ConstantProperty<23, bool, false>, // IsRawInput
  Mitov::DigitalPin_NoImplementation<1 >, // OutputPin
  2 // PIN
  > ArduinoDigitalChannel_2;

Mitov::ArduinoDigitalInputChannel<
  Mitov::ConstantProperty<51, bool, false>, // InitialValue
  Mitov::ConstantProperty<25, bool, false>, // IsOpenDrain
  Mitov::ConstantProperty<25, bool, true>, // IsOutput
  Mitov::ConstantProperty<20, bool, false>, // IsPullDown
  Mitov::ConstantProperty<4, bool, false >, // IsPullUp
  Mitov::DigitalPin_NoImplementation<3 >, // OutputPin
  5 // PIN
  > ArduinoDigitalChannel_5;

Mitov::ArduinoDigitalInputChannel<
  Mitov::ConstantProperty<51, bool, false>, // InitialValue
  Mitov::ConstantProperty<25, bool, false>, // IsOpenDrain
  Mitov::ConstantProperty<25, bool, true>, // IsOutput
  Mitov::ConstantProperty<20, bool, false>, // IsPullDown
  Mitov::ConstantProperty<4, bool, false >, // IsPullUp
  Mitov::DigitalPin_NoImplementation<3 >, // OutputPin
  6 // PIN
  > ArduinoDigitalChannel_6;

Mitov::ArduinoDigitalInputChannel<
  Mitov::ConstantProperty<51, bool, false>, // InitialValue
  Mitov::ConstantProperty<25, bool, false>, // IsOpenDrain
  Mitov::ConstantProperty<25, bool, true>, // IsOutput
  Mitov::ConstantProperty<20, bool, false>, // IsPullDown
  Mitov::ConstantProperty<2, bool, false >, // IsPullUp
  Mitov::DigitalPin_NoImplementation<1 >, // OutputPin
  7 // PIN
  > ArduinoDigitalChannel_7;

} // BoardDeclarations

// Interrupts

namespace Interrupts
{
void __ICACHE_RAM_ATTR__ Handler2();

OpenWire::PinChangeInterrupt<2, ::CallChains::InterruptRaising1, ::CallChains::InterruptFalling1> Pin2( Handler2 );

void __ICACHE_RAM_ATTR__ Handler2()
{
    Pin2.InterruptHandler();
}

} // Interrupts

// Declarations

namespace Declarations
{
Mitov::UltrasonicRanger_Interrupt<
  Mitov::ConstantProperty<4, bool, false>, // ClockInputPin_o_IsConnected
  Mitov::ConstantProperty<6, bool, true >, // Enabled
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable1 >, // FClocked
  Mitov::TypedVariable<1, uint32_t, ::ComponentVariables::Variable2 >, // FState
  Mitov::AnalogPin_EmbeddedPinImplementation<12, ::PinCalls::PinCallerReceive0 >, // OutputPin
  Mitov::ConstantProperty<10, uint32_t, 100 >, // PauseTime
  Mitov::DigitalPin_DirectBoardPinImplementation<3 >, // PingOutputPin
  Mitov::ConstantProperty<9, uint32_t, 2 >, // PingTime
  Mitov::ConstantProperty<8, uint32_t, 1000 >, // Timeout
  Mitov::DigitalPin_NoImplementation<5 >, // TimeoutOutputPin
  Mitov::ConstantPropertyFloat<11, float, ::VisuinoConstants::FloatValue0 >, // TimeoutValue
  Mitov::ConstantProperty<7, Mitov::TArduinoRangerUnits, Mitov::rdCm > // Units
   > _o_PingeSensor;

Mitov::CompareValue<
  Mitov::CompareType_Implementation_ctBigger, // CompareType
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable4 >, // FStarted
  Mitov::ConstantProperty<4, bool, true >, // OnlyChanged
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive1, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable3 > >, // OutputPin
  float, // TYPE
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue1 > // Value
   > _o_Rg1 = Mitov::CompareValue<
  Mitov::CompareType_Implementation_ctBigger, // CompareType
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable4 >, // FStarted
  Mitov::ConstantProperty<4, bool, true >, // OnlyChanged
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive1, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable3 > >, // OutputPin
  float, // TYPE
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue1 > // Value
   >( 0.0f );

Mitov::CompareValue<
  Mitov::CompareType_Implementation_ctBigger, // CompareType
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable6 >, // FStarted
  Mitov::ConstantProperty<4, bool, true >, // OnlyChanged
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive2, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable5 > >, // OutputPin
  float, // TYPE
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue2 > // Value
   > _o_RG2 = Mitov::CompareValue<
  Mitov::CompareType_Implementation_ctBigger, // CompareType
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable6 >, // FStarted
  Mitov::ConstantProperty<4, bool, true >, // OnlyChanged
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive2, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable5 > >, // OutputPin
  float, // TYPE
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue2 > // Value
   >( 0.0f );

Mitov::CompareValue<
  Mitov::CompareType_Implementation_ctBigger, // CompareType
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable8 >, // FStarted
  Mitov::ConstantProperty<4, bool, true >, // OnlyChanged
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive3, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable7 > >, // OutputPin
  float, // TYPE
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue3 > // Value
   > _o_RG3 = Mitov::CompareValue<
  Mitov::CompareType_Implementation_ctBigger, // CompareType
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable8 >, // FStarted
  Mitov::ConstantProperty<4, bool, true >, // OnlyChanged
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive3, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable7 > >, // OutputPin
  float, // TYPE
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue3 > // Value
   >( 0.0f );

Mitov::BooleanOperation<
  Mitov::BooleanAnd, // BASE
  2, // COUNT_InputPins
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable10 >, // FModified
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive4, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable9 > > // OutputPin
   > _o_YellowAndNotGreen;

Mitov::BooleanInverter<
  Mitov::ConstantProperty<2, bool, true >, // Enabled
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<3, ::PinCalls::PinCallerReceive5, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable11 > > // OutputPin
   > _o_NotGreen;

Mitov::BooleanInverter<
  Mitov::ConstantProperty<2, bool, true >, // Enabled
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<3, ::PinCalls::PinCallerReceive6, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable12 > > // OutputPin
   > _o_NotYellow;

Mitov::BooleanOperation<
  Mitov::BooleanAnd, // BASE
  2, // COUNT_InputPins
  Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable14 >, // FModified
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<1, ::PinCalls::PinCallerReceive7, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable13 > > // OutputPin
   > _o_RedAndNotYellow;

Mitov::AveragePeriod<
  Mitov::ConstantProperty<3, bool, true >, // Enabled
  Mitov::AnalogPin_EmbeddedPinImplementation<4, ::PinCalls::PinCallerReceive8 >, // OutputPin
  Mitov::ConstantProperty<1, uint32_t, 1000 > // Period
   > _o_PingAverage;

Mitov::LiquidCrystalDisplay<
  Mitov::LiquidCrystalDisplayParallel<
  Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<8 >, Mitov::DigitalPin_DirectBoardPinImplementation<9 >, Mitov::DigitalPin_DirectBoardPinImplementation<10 >, Mitov::DigitalPin_DirectBoardPinImplementation<13 >>, // 1_PINS
  Mitov::DigitalPin_DirectBoardPinImplementation<11 >, // 1_PINS_0
  Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
  Mitov::DigitalPin_DirectBoardPinImplementation<12 >, // 1_PINS_2
  Mitov::ConstantProperty<21, bool, false >, // AutoScroll
  Mitov::ConstantProperty<24, bool, false >, // Blink
  Mitov::ConstantProperty<20, bool, true >, // Enabled
  Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
  Mitov::ConstantProperty<22, bool, false >, // RightToLeft
  Mitov::ConstantProperty<23, bool, true > // ShowCursor
  >, // 0_TYPE
  16, // Columns
  Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable16>, // FCursorLine
  Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable15>, // FCursorPos
  2 // Rows
   > _o_Panalla;

Mitov::LiquidCrystalElementTextField<
    Mitov::LiquidCrystalDisplay<
      Mitov::LiquidCrystalDisplayParallel<
      Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<8 >, Mitov::DigitalPin_DirectBoardPinImplementation<9 >, Mitov::DigitalPin_DirectBoardPinImplementation<10 >, Mitov::DigitalPin_DirectBoardPinImplementation<13 >>, // 1_PINS
      Mitov::DigitalPin_DirectBoardPinImplementation<11 >, // 1_PINS_0
      Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
      Mitov::DigitalPin_DirectBoardPinImplementation<12 >, // 1_PINS_2
      Mitov::ConstantProperty<21, bool, false >, // AutoScroll
      Mitov::ConstantProperty<24, bool, false >, // Blink
      Mitov::ConstantProperty<20, bool, true >, // Enabled
      Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
      Mitov::ConstantProperty<22, bool, false >, // RightToLeft
      Mitov::ConstantProperty<23, bool, true > // ShowCursor
      >, // 0_TYPE
      16, // Columns
      Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable16>, // FCursorLine
      Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable15>, // FCursorPos
      2 // Rows
       >, // 0_TYPE_OWNER
    Declarations::_o_Panalla, // 1_NAME_OWNER
    Mitov::ConstantProperty<5, bool, true >, // AllignLeft
    Mitov::ConstantProperty<7, uint32_t, 0 >, // Column
    Mitov::ConstantProperty<6, char, ' ' >, // FillCharacter
    Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue0 >, // InitialValue
    Mitov::ConstantProperty<8, uint32_t, 0 >, // Row
    Mitov::ConstantProperty<4, uint32_t, 16 > // Width
     > TArduinoLiquidCrystalElementTextField1;

Mitov::LiquidCrystalElementTextField<
    Mitov::LiquidCrystalDisplay<
      Mitov::LiquidCrystalDisplayParallel<
      Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<8 >, Mitov::DigitalPin_DirectBoardPinImplementation<9 >, Mitov::DigitalPin_DirectBoardPinImplementation<10 >, Mitov::DigitalPin_DirectBoardPinImplementation<13 >>, // 1_PINS
      Mitov::DigitalPin_DirectBoardPinImplementation<11 >, // 1_PINS_0
      Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
      Mitov::DigitalPin_DirectBoardPinImplementation<12 >, // 1_PINS_2
      Mitov::ConstantProperty<21, bool, false >, // AutoScroll
      Mitov::ConstantProperty<24, bool, false >, // Blink
      Mitov::ConstantProperty<20, bool, true >, // Enabled
      Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
      Mitov::ConstantProperty<22, bool, false >, // RightToLeft
      Mitov::ConstantProperty<23, bool, true > // ShowCursor
      >, // 0_TYPE
      16, // Columns
      Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable16>, // FCursorLine
      Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable15>, // FCursorPos
      2 // Rows
       >, // 0_TYPE_OWNER
    Declarations::_o_Panalla, // 1_NAME_OWNER
    Mitov::ConstantProperty<5, bool, true >, // AllignLeft
    Mitov::ConstantProperty<7, uint32_t, 0 >, // Column
    Mitov::ConstantProperty<6, char, ' ' >, // FillCharacter
    Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue1 >, // InitialValue
    Mitov::ConstantProperty<8, uint32_t, 1 >, // Row
    Mitov::ConstantProperty<4, uint32_t, 16 > // Width
     > TArduinoLiquidCrystalElementTextField2;

Mitov::LiquidCrystalDisplayInput<Mitov::LiquidCrystalElementTextField<
    Mitov::LiquidCrystalDisplay<
      Mitov::LiquidCrystalDisplayParallel<
      Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<8 >, Mitov::DigitalPin_DirectBoardPinImplementation<9 >, Mitov::DigitalPin_DirectBoardPinImplementation<10 >, Mitov::DigitalPin_DirectBoardPinImplementation<13 >>, // 1_PINS
      Mitov::DigitalPin_DirectBoardPinImplementation<11 >, // 1_PINS_0
      Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
      Mitov::DigitalPin_DirectBoardPinImplementation<12 >, // 1_PINS_2
      Mitov::ConstantProperty<21, bool, false >, // AutoScroll
      Mitov::ConstantProperty<24, bool, false >, // Blink
      Mitov::ConstantProperty<20, bool, true >, // Enabled
      Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
      Mitov::ConstantProperty<22, bool, false >, // RightToLeft
      Mitov::ConstantProperty<23, bool, true > // ShowCursor
      >, // 0_TYPE
      16, // Columns
      Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable16>, // FCursorLine
      Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable15>, // FCursorPos
      2 // Rows
       >, // 0_TYPE_OWNER
    Declarations::_o_Panalla, // 1_NAME_OWNER
    Mitov::ConstantProperty<5, bool, true >, // AllignLeft
    Mitov::ConstantProperty<7, uint32_t, 0 >, // Column
    Mitov::ConstantProperty<6, char, ' ' >, // FillCharacter
    Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue1 >, // InitialValue
    Mitov::ConstantProperty<8, uint32_t, 1 >, // Row
    Mitov::ConstantProperty<4, uint32_t, 16 > // Width
     >, Declarations::TArduinoLiquidCrystalElementTextField2, float> TArduinoLiquidCrystalElementTextField2_InputFloat_1;
Mitov::Snapshot<
  float, // 0_TYPE
  Mitov::ConstantProperty<3, bool, true >, // Enabled
  Mitov::AnalogPin_EmbeddedPinImplementation<4, ::PinCalls::PinCallerReceive9 > // OutputPin
   > _o_AnalogSnapshot1 = Mitov::Snapshot<
  float, // 0_TYPE
  Mitov::ConstantProperty<3, bool, true >, // Enabled
  Mitov::AnalogPin_EmbeddedPinImplementation<4, ::PinCalls::PinCallerReceive9 > // OutputPin
   >( 0.0f );

Mitov::PulseGeneratorSimple<
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue3 >, // Asymmetry
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::ConstantPropertyFloat<1, float, ::VisuinoConstants::FloatValue4 >, // Frequency
  Mitov::TypedVariableValue<4, bool, ::ComponentVariables::Variable17, false >, // InitialValue
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<6, ::PinCalls::PinCallerReceive10, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable18 > >, // OutputPin
  Mitov::ConstantPropertyFloat<3, float, ::VisuinoConstants::FloatValue3 > // Phase
   > _o_PulseGenerator1;

} // Declarations

// Type Converters

namespace TypeConverters
{
Mitov::Convert_BinaryToClock<Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable19 >> Converter0;
} // TypeConverters

// Call Chains

namespace CallChains
{
void InterruptRaising1::ChainCall()
{
  Declarations::_o_PingeSensor.InterruptHandler( true );
}

void InterruptFalling1::ChainCall()
{
  Declarations::_o_PingeSensor.InterruptHandler( false );
}

} // CallChains

// Pin Call Declarations

namespace PinCalls
{
void PinCallerConverterReceive1( void *_Data );
} // PinCalls

// Pin Call Implementations

namespace PinCalls
{
void PinCallerReceive0::Notify( void *_Data )
{
  Declarations::_o_PingAverage.InputPin_o_Receive( _Data );
  Declarations::_o_AnalogSnapshot1.InputPin_o_Receive( _Data );
}

void PinCallerReceive1::Notify( void *_Data )
{
  BoardDeclarations::ArduinoDigitalChannel_5.DigitalInputPin_o_Receive( _Data );
  Declarations::_o_NotGreen.InputPin_o_Receive( _Data );
}

void PinCallerReceive2::Notify( void *_Data )
{
  Declarations::_o_YellowAndNotGreen.InputPins_o_Receive( 1, _Data );
  Declarations::_o_NotYellow.InputPin_o_Receive( _Data );
}

void PinCallerReceive3::Notify( void *_Data )
{
  Declarations::_o_RedAndNotYellow.InputPins_o_Receive( 1, _Data );
}

void PinCallerReceive4::Notify( void *_Data )
{
  BoardDeclarations::ArduinoDigitalChannel_6.DigitalInputPin_o_Receive( _Data );
}

void PinCallerReceive5::Notify( void *_Data )
{
  Declarations::_o_YellowAndNotGreen.InputPins_o_Receive( 0, _Data );
}

void PinCallerReceive6::Notify( void *_Data )
{
  Declarations::_o_RedAndNotYellow.InputPins_o_Receive( 0, _Data );
}

void PinCallerReceive7::Notify( void *_Data )
{
  BoardDeclarations::ArduinoDigitalChannel_7.DigitalInputPin_o_Receive( _Data );
}

void PinCallerReceive8::Notify( void *_Data )
{
  BoardDeclarations::SerialPort0_InputFloat_1.InputPin_o_Receive( _Data );
  Declarations::_o_Rg1.InputPin_o_Receive( _Data );
  Declarations::_o_RG2.InputPin_o_Receive( _Data );
  Declarations::_o_RG3.InputPin_o_Receive( _Data );
}

void PinCallerReceive9::Notify( void *_Data )
{
  Declarations::TArduinoLiquidCrystalElementTextField2_InputFloat_1.InputPin_o_Receive( _Data );
}

void PinCallerReceive10::Notify( void *_Data )
{
  TypeConverters::Converter0.Convert( _Data, PinCallerConverterReceive1 );
}

void PinCallerConverterReceive1( void *_Data )
{
  Declarations::_o_AnalogSnapshot1.SnapshotInputPin_o_Receive( _Data );
}
} // PinCalls

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  BoardDeclarations::ArduinoDigitalChannel_2.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_5.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_6.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_7.SystemInit();
  BoardDeclarations::SerialPort0.SystemInit();
  Declarations::_o_Panalla.SystemInit();
  BoardDeclarations::ArduinoDigitalChannel_2.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_5.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_6.SystemStart();
  BoardDeclarations::ArduinoDigitalChannel_7.SystemStart();
  Declarations::_o_PingeSensor.SystemStart();
  Declarations::_o_Rg1.SystemStart();
  Declarations::_o_RG2.SystemStart();
  Declarations::_o_RG3.SystemStart();
  Declarations::_o_YellowAndNotGreen.SystemStart();
  Declarations::_o_RedAndNotYellow.SystemStart();
  Declarations::TArduinoLiquidCrystalElementTextField1.SystemStart();
  Declarations::TArduinoLiquidCrystalElementTextField2.SystemStart();
  Declarations::_o_PulseGenerator1.SystemStart();

  OpenWire::SystemStarted();
}

// The loop function is called in an endless loop
void loop()
{
  BoardDeclarations::ArduinoDigitalChannel_2.SystemLoopBegin();
  BoardDeclarations::ArduinoDigitalChannel_5.SystemLoopBegin();
  BoardDeclarations::ArduinoDigitalChannel_6.SystemLoopBegin();
  BoardDeclarations::ArduinoDigitalChannel_7.SystemLoopBegin();
  BoardDeclarations::SerialPort0.SystemLoopBegin();
  Declarations::_o_PingeSensor.SystemLoopBegin();
  Declarations::_o_PingAverage.SystemLoopBegin();
  Declarations::_o_PulseGenerator1.SystemLoopBegin();
  Declarations::_o_YellowAndNotGreen.SystemLoopEnd();
  Declarations::_o_RedAndNotYellow.SystemLoopEnd();
}
